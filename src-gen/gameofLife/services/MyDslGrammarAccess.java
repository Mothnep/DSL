/*
 * generated by Xtext 2.36.0
 */
package gameofLife.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameofLife.MyDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGridAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGridGridDefinitionParserRuleCall_0_0 = (RuleCall)cGridAssignment_0.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesRulesDefinitionParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		private final Assignment cStepsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStepsStepsDefinitionParserRuleCall_2_0 = (RuleCall)cStepsAssignment_2.eContents().get(0);
		
		////Model:
		////    greetings+=Greeting*;
		////
		////Greeting:
		////    'Hello' name=ID '!';
		//Model:
		//    grid=gridDefinition
		//    rules=rulesDefinition
		//    steps=stepsDefinition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//grid=gridDefinition
		//rules=rulesDefinition
		//steps=stepsDefinition
		public Group getGroup() { return cGroup; }
		
		//grid=gridDefinition
		public Assignment getGridAssignment_0() { return cGridAssignment_0; }
		
		//gridDefinition
		public RuleCall getGridGridDefinitionParserRuleCall_0_0() { return cGridGridDefinitionParserRuleCall_0_0; }
		
		//rules=rulesDefinition
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }
		
		//rulesDefinition
		public RuleCall getRulesRulesDefinitionParserRuleCall_1_0() { return cRulesRulesDefinitionParserRuleCall_1_0; }
		
		//steps=stepsDefinition
		public Assignment getStepsAssignment_2() { return cStepsAssignment_2; }
		
		//stepsDefinition
		public RuleCall getStepsStepsDefinitionParserRuleCall_2_0() { return cStepsStepsDefinitionParserRuleCall_2_0; }
	}
	public class GridDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameofLife.MyDsl.gridDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGridKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWidthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_1_0 = (RuleCall)cWidthAssignment_1.eContents().get(0);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHeightINTTerminalRuleCall_3_0 = (RuleCall)cHeightAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAliveKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAliveCellsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAliveCellsCellCoordParserRuleCall_4_1_0 = (RuleCall)cAliveCellsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cAliveCellsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cAliveCellsCellCoordParserRuleCall_4_2_1_0 = (RuleCall)cAliveCellsAssignment_4_2_1.eContents().get(0);
		
		//gridDefinition:
		//    'grid' width=INT 'x' height=INT
		//    ('alive' aliveCells+=CellCoord (',' aliveCells+=CellCoord)*)? // allow multiple cells with commas
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'grid' width=INT 'x' height=INT
		//('alive' aliveCells+=CellCoord (',' aliveCells+=CellCoord)*)?
		public Group getGroup() { return cGroup; }
		
		//'grid'
		public Keyword getGridKeyword_0() { return cGridKeyword_0; }
		
		//width=INT
		public Assignment getWidthAssignment_1() { return cWidthAssignment_1; }
		
		//INT
		public RuleCall getWidthINTTerminalRuleCall_1_0() { return cWidthINTTerminalRuleCall_1_0; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//height=INT
		public Assignment getHeightAssignment_3() { return cHeightAssignment_3; }
		
		//INT
		public RuleCall getHeightINTTerminalRuleCall_3_0() { return cHeightINTTerminalRuleCall_3_0; }
		
		//('alive' aliveCells+=CellCoord (',' aliveCells+=CellCoord)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'alive'
		public Keyword getAliveKeyword_4_0() { return cAliveKeyword_4_0; }
		
		//aliveCells+=CellCoord
		public Assignment getAliveCellsAssignment_4_1() { return cAliveCellsAssignment_4_1; }
		
		//CellCoord
		public RuleCall getAliveCellsCellCoordParserRuleCall_4_1_0() { return cAliveCellsCellCoordParserRuleCall_4_1_0; }
		
		//(',' aliveCells+=CellCoord)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//aliveCells+=CellCoord
		public Assignment getAliveCellsAssignment_4_2_1() { return cAliveCellsAssignment_4_2_1; }
		
		//CellCoord
		public RuleCall getAliveCellsCellCoordParserRuleCall_4_2_1_0() { return cAliveCellsCellCoordParserRuleCall_4_2_1_0; }
	}
	public class RulesDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameofLife.MyDsl.rulesDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRulesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLiveToDeadAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLiveToDeadLiveToDeadRuleParserRuleCall_1_0 = (RuleCall)cLiveToDeadAssignment_1.eContents().get(0);
		private final Assignment cLiveToAliveAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLiveToAliveLiveToAliveRuleParserRuleCall_2_0 = (RuleCall)cLiveToAliveAssignment_2.eContents().get(0);
		private final Assignment cDeadToAliveAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeadToAliveDeadToAliveRuleParserRuleCall_3_0 = (RuleCall)cDeadToAliveAssignment_3.eContents().get(0);
		
		//rulesDefinition:
		//    'rules'
		//    liveToDead+=LiveToDeadRule*
		//    liveToAlive+=LiveToAliveRule*
		//    deadToAlive+=DeadToAliveRule*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rules'
		//liveToDead+=LiveToDeadRule*
		//liveToAlive+=LiveToAliveRule*
		//deadToAlive+=DeadToAliveRule*
		public Group getGroup() { return cGroup; }
		
		//'rules'
		public Keyword getRulesKeyword_0() { return cRulesKeyword_0; }
		
		//liveToDead+=LiveToDeadRule*
		public Assignment getLiveToDeadAssignment_1() { return cLiveToDeadAssignment_1; }
		
		//LiveToDeadRule
		public RuleCall getLiveToDeadLiveToDeadRuleParserRuleCall_1_0() { return cLiveToDeadLiveToDeadRuleParserRuleCall_1_0; }
		
		//liveToAlive+=LiveToAliveRule*
		public Assignment getLiveToAliveAssignment_2() { return cLiveToAliveAssignment_2; }
		
		//LiveToAliveRule
		public RuleCall getLiveToAliveLiveToAliveRuleParserRuleCall_2_0() { return cLiveToAliveLiveToAliveRuleParserRuleCall_2_0; }
		
		//deadToAlive+=DeadToAliveRule*
		public Assignment getDeadToAliveAssignment_3() { return cDeadToAliveAssignment_3; }
		
		//DeadToAliveRule
		public RuleCall getDeadToAliveDeadToAliveRuleParserRuleCall_3_0() { return cDeadToAliveDeadToAliveRuleParserRuleCall_3_0; }
	}
	public class LiveToDeadRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameofLife.MyDsl.LiveToDeadRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLive_to_deadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNeighborsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		
		//LiveToDeadRule:
		//    'live_to_dead' 'if' 'neighbors' condition=Condition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'live_to_dead' 'if' 'neighbors' condition=Condition
		public Group getGroup() { return cGroup; }
		
		//'live_to_dead'
		public Keyword getLive_to_deadKeyword_0() { return cLive_to_deadKeyword_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'neighbors'
		public Keyword getNeighborsKeyword_2() { return cNeighborsKeyword_2; }
		
		//condition=Condition
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0() { return cConditionConditionParserRuleCall_3_0; }
	}
	public class LiveToAliveRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameofLife.MyDsl.LiveToAliveRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLive_to_aliveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNeighborsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		
		//LiveToAliveRule:
		//    'live_to_alive' 'if' 'neighbors' condition=Condition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'live_to_alive' 'if' 'neighbors' condition=Condition
		public Group getGroup() { return cGroup; }
		
		//'live_to_alive'
		public Keyword getLive_to_aliveKeyword_0() { return cLive_to_aliveKeyword_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'neighbors'
		public Keyword getNeighborsKeyword_2() { return cNeighborsKeyword_2; }
		
		//condition=Condition
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0() { return cConditionConditionParserRuleCall_3_0; }
	}
	public class DeadToAliveRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameofLife.MyDsl.DeadToAliveRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDead_to_aliveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNeighborsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		
		//DeadToAliveRule:
		//    'dead_to_alive' 'if' 'neighbors' condition=Condition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'dead_to_alive' 'if' 'neighbors' condition=Condition
		public Group getGroup() { return cGroup; }
		
		//'dead_to_alive'
		public Keyword getDead_to_aliveKeyword_0() { return cDead_to_aliveKeyword_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'neighbors'
		public Keyword getNeighborsKeyword_2() { return cNeighborsKeyword_2; }
		
		//condition=Condition
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0() { return cConditionConditionParserRuleCall_3_0; }
	}
	public class StepsDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameofLife.MyDsl.stepsDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStepsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCountINTTerminalRuleCall_1_0 = (RuleCall)cCountAssignment_1.eContents().get(0);
		
		//stepsDefinition:
		//    'steps' count=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'steps' count=INT
		public Group getGroup() { return cGroup; }
		
		//'steps'
		public Keyword getStepsKeyword_0() { return cStepsKeyword_0; }
		
		//count=INT
		public Assignment getCountAssignment_1() { return cCountAssignment_1; }
		
		//INT
		public RuleCall getCountINTTerminalRuleCall_1_0() { return cCountINTTerminalRuleCall_1_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameofLife.MyDsl.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNumberAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_0_1_0 = (RuleCall)cNumberAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNumberAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_1_1_0 = (RuleCall)cNumberAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNumberAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_2_1_0 = (RuleCall)cNumberAssignment_2_1.eContents().get(0);
		
		//Condition:
		//    '>' number=INT
		//    | '<' number=INT
		//    | '=' number=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'>' number=INT
		//| '<' number=INT
		//| '=' number=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>' number=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_0() { return cGreaterThanSignKeyword_0_0; }
		
		//number=INT
		public Assignment getNumberAssignment_0_1() { return cNumberAssignment_0_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_0_1_0() { return cNumberINTTerminalRuleCall_0_1_0; }
		
		//'<' number=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }
		
		//number=INT
		public Assignment getNumberAssignment_1_1() { return cNumberAssignment_1_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_1_0() { return cNumberINTTerminalRuleCall_1_1_0; }
		
		//'=' number=INT
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//number=INT
		public Assignment getNumberAssignment_2_1() { return cNumberAssignment_2_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_2_1_0() { return cNumberINTTerminalRuleCall_2_1_0; }
	}
	public class CellCoordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameofLife.MyDsl.CellCoord");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYINTTerminalRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CellCoord: // coordinate of a cell
		//    '(' x=INT ',' y=INT ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// coordinate of a cell
		//   '(' x=INT ',' y=INT ')'
		public Group getGroup() { return cGroup; }
		
		//// coordinate of a cell
		//   '('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//x=INT
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_1_0() { return cXINTTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//y=INT
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_3_0() { return cYINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class NeighborCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameofLife.MyDsl.NeighborCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNeighborCheckAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCheckKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNeighborsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNeighborListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNeighborListNeighborParserRuleCall_3_0 = (RuleCall)cNeighborListAssignment_3.eContents().get(0);
		
		//NeighborCheck:
		//    {NeighborCheck} 'check' 'neighbors' neighborList+=Neighbor*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{NeighborCheck} 'check' 'neighbors' neighborList+=Neighbor*
		public Group getGroup() { return cGroup; }
		
		//{NeighborCheck}
		public Action getNeighborCheckAction_0() { return cNeighborCheckAction_0; }
		
		//'check'
		public Keyword getCheckKeyword_1() { return cCheckKeyword_1; }
		
		//'neighbors'
		public Keyword getNeighborsKeyword_2() { return cNeighborsKeyword_2; }
		
		//neighborList+=Neighbor*
		public Assignment getNeighborListAssignment_3() { return cNeighborListAssignment_3; }
		
		//Neighbor
		public RuleCall getNeighborListNeighborParserRuleCall_3_0() { return cNeighborListNeighborParserRuleCall_3_0; }
	}
	public class NeighborElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameofLife.MyDsl.Neighbor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDxINTTerminalRuleCall_1_0 = (RuleCall)cDxAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDyINTTerminalRuleCall_3_0 = (RuleCall)cDyAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Neighbor:
		//    '(' dx=INT ',' dy=INT ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' dx=INT ',' dy=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//dx=INT
		public Assignment getDxAssignment_1() { return cDxAssignment_1; }
		
		//INT
		public RuleCall getDxINTTerminalRuleCall_1_0() { return cDxINTTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//dy=INT
		public Assignment getDyAssignment_3() { return cDyAssignment_3; }
		
		//INT
		public RuleCall getDyINTTerminalRuleCall_3_0() { return cDyINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	private final ModelElements pModel;
	private final GridDefinitionElements pGridDefinition;
	private final RulesDefinitionElements pRulesDefinition;
	private final LiveToDeadRuleElements pLiveToDeadRule;
	private final LiveToAliveRuleElements pLiveToAliveRule;
	private final DeadToAliveRuleElements pDeadToAliveRule;
	private final StepsDefinitionElements pStepsDefinition;
	private final ConditionElements pCondition;
	private final CellCoordElements pCellCoord;
	private final NeighborCheckElements pNeighborCheck;
	private final NeighborElements pNeighbor;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGridDefinition = new GridDefinitionElements();
		this.pRulesDefinition = new RulesDefinitionElements();
		this.pLiveToDeadRule = new LiveToDeadRuleElements();
		this.pLiveToAliveRule = new LiveToAliveRuleElements();
		this.pDeadToAliveRule = new DeadToAliveRuleElements();
		this.pStepsDefinition = new StepsDefinitionElements();
		this.pCondition = new ConditionElements();
		this.pCellCoord = new CellCoordElements();
		this.pNeighborCheck = new NeighborCheckElements();
		this.pNeighbor = new NeighborElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("gameofLife.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Model:
	////    greetings+=Greeting*;
	////
	////Greeting:
	////    'Hello' name=ID '!';
	//Model:
	//    grid=gridDefinition
	//    rules=rulesDefinition
	//    steps=stepsDefinition
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//gridDefinition:
	//    'grid' width=INT 'x' height=INT
	//    ('alive' aliveCells+=CellCoord (',' aliveCells+=CellCoord)*)? // allow multiple cells with commas
	//;
	public GridDefinitionElements getGridDefinitionAccess() {
		return pGridDefinition;
	}
	
	public ParserRule getGridDefinitionRule() {
		return getGridDefinitionAccess().getRule();
	}
	
	//rulesDefinition:
	//    'rules'
	//    liveToDead+=LiveToDeadRule*
	//    liveToAlive+=LiveToAliveRule*
	//    deadToAlive+=DeadToAliveRule*
	//;
	public RulesDefinitionElements getRulesDefinitionAccess() {
		return pRulesDefinition;
	}
	
	public ParserRule getRulesDefinitionRule() {
		return getRulesDefinitionAccess().getRule();
	}
	
	//LiveToDeadRule:
	//    'live_to_dead' 'if' 'neighbors' condition=Condition
	//;
	public LiveToDeadRuleElements getLiveToDeadRuleAccess() {
		return pLiveToDeadRule;
	}
	
	public ParserRule getLiveToDeadRuleRule() {
		return getLiveToDeadRuleAccess().getRule();
	}
	
	//LiveToAliveRule:
	//    'live_to_alive' 'if' 'neighbors' condition=Condition
	//;
	public LiveToAliveRuleElements getLiveToAliveRuleAccess() {
		return pLiveToAliveRule;
	}
	
	public ParserRule getLiveToAliveRuleRule() {
		return getLiveToAliveRuleAccess().getRule();
	}
	
	//DeadToAliveRule:
	//    'dead_to_alive' 'if' 'neighbors' condition=Condition
	//;
	public DeadToAliveRuleElements getDeadToAliveRuleAccess() {
		return pDeadToAliveRule;
	}
	
	public ParserRule getDeadToAliveRuleRule() {
		return getDeadToAliveRuleAccess().getRule();
	}
	
	//stepsDefinition:
	//    'steps' count=INT
	//;
	public StepsDefinitionElements getStepsDefinitionAccess() {
		return pStepsDefinition;
	}
	
	public ParserRule getStepsDefinitionRule() {
		return getStepsDefinitionAccess().getRule();
	}
	
	//Condition:
	//    '>' number=INT
	//    | '<' number=INT
	//    | '=' number=INT
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//CellCoord: // coordinate of a cell
	//    '(' x=INT ',' y=INT ')'
	//;
	public CellCoordElements getCellCoordAccess() {
		return pCellCoord;
	}
	
	public ParserRule getCellCoordRule() {
		return getCellCoordAccess().getRule();
	}
	
	//NeighborCheck:
	//    {NeighborCheck} 'check' 'neighbors' neighborList+=Neighbor*
	//;
	public NeighborCheckElements getNeighborCheckAccess() {
		return pNeighborCheck;
	}
	
	public ParserRule getNeighborCheckRule() {
		return getNeighborCheckAccess().getRule();
	}
	
	//Neighbor:
	//    '(' dx=INT ',' dy=INT ')'
	//;
	public NeighborElements getNeighborAccess() {
		return pNeighbor;
	}
	
	public ParserRule getNeighborRule() {
		return getNeighborAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
