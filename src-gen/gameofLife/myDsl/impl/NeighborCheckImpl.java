/**
 * generated by Xtext 2.36.0
 */
package gameofLife.myDsl.impl;

import gameofLife.myDsl.MyDslPackage;
import gameofLife.myDsl.Neighbor;
import gameofLife.myDsl.NeighborCheck;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Neighbor Check</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link gameofLife.myDsl.impl.NeighborCheckImpl#getNeighborList <em>Neighbor List</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NeighborCheckImpl extends MinimalEObjectImpl.Container implements NeighborCheck
{
  /**
   * The cached value of the '{@link #getNeighborList() <em>Neighbor List</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNeighborList()
   * @generated
   * @ordered
   */
  protected EList<Neighbor> neighborList;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NeighborCheckImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.NEIGHBOR_CHECK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Neighbor> getNeighborList()
  {
    if (neighborList == null)
    {
      neighborList = new EObjectContainmentEList<Neighbor>(Neighbor.class, this, MyDslPackage.NEIGHBOR_CHECK__NEIGHBOR_LIST);
    }
    return neighborList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.NEIGHBOR_CHECK__NEIGHBOR_LIST:
        return ((InternalEList<?>)getNeighborList()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.NEIGHBOR_CHECK__NEIGHBOR_LIST:
        return getNeighborList();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.NEIGHBOR_CHECK__NEIGHBOR_LIST:
        getNeighborList().clear();
        getNeighborList().addAll((Collection<? extends Neighbor>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.NEIGHBOR_CHECK__NEIGHBOR_LIST:
        getNeighborList().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.NEIGHBOR_CHECK__NEIGHBOR_LIST:
        return neighborList != null && !neighborList.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //NeighborCheckImpl
