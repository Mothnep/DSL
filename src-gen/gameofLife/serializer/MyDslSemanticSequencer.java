/*
 * generated by Xtext 2.36.0
 */
package gameofLife.serializer;

import com.google.inject.Inject;
import gameofLife.myDsl.CellCoord;
import gameofLife.myDsl.Condition;
import gameofLife.myDsl.DeadToAliveRule;
import gameofLife.myDsl.LiveToAliveRule;
import gameofLife.myDsl.LiveToDeadRule;
import gameofLife.myDsl.Model;
import gameofLife.myDsl.MyDslPackage;
import gameofLife.myDsl.Neighbor;
import gameofLife.myDsl.NeighborCheck;
import gameofLife.myDsl.gridDefinition;
import gameofLife.myDsl.rulesDefinition;
import gameofLife.myDsl.stepsDefinition;
import gameofLife.services.MyDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.CELL_COORD:
				sequence_CellCoord(context, (CellCoord) semanticObject); 
				return; 
			case MyDslPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case MyDslPackage.DEAD_TO_ALIVE_RULE:
				sequence_DeadToAliveRule(context, (DeadToAliveRule) semanticObject); 
				return; 
			case MyDslPackage.LIVE_TO_ALIVE_RULE:
				sequence_LiveToAliveRule(context, (LiveToAliveRule) semanticObject); 
				return; 
			case MyDslPackage.LIVE_TO_DEAD_RULE:
				sequence_LiveToDeadRule(context, (LiveToDeadRule) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.NEIGHBOR:
				sequence_Neighbor(context, (Neighbor) semanticObject); 
				return; 
			case MyDslPackage.NEIGHBOR_CHECK:
				sequence_NeighborCheck(context, (NeighborCheck) semanticObject); 
				return; 
			case MyDslPackage.GRID_DEFINITION:
				sequence_gridDefinition(context, (gridDefinition) semanticObject); 
				return; 
			case MyDslPackage.RULES_DEFINITION:
				sequence_rulesDefinition(context, (rulesDefinition) semanticObject); 
				return; 
			case MyDslPackage.STEPS_DEFINITION:
				sequence_stepsDefinition(context, (stepsDefinition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     CellCoord returns CellCoord
	 *
	 * Constraint:
	 *     (x=INT y=INT)
	 * </pre>
	 */
	protected void sequence_CellCoord(ISerializationContext context, CellCoord semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CELL_COORD__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CELL_COORD__X));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CELL_COORD__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CELL_COORD__Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCellCoordAccess().getXINTTerminalRuleCall_1_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getCellCoordAccess().getYINTTerminalRuleCall_3_0(), semanticObject.getY());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (number=INT | number=INT | number=INT)
	 * </pre>
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeadToAliveRule returns DeadToAliveRule
	 *
	 * Constraint:
	 *     condition=Condition
	 * </pre>
	 */
	protected void sequence_DeadToAliveRule(ISerializationContext context, DeadToAliveRule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DEAD_TO_ALIVE_RULE__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DEAD_TO_ALIVE_RULE__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeadToAliveRuleAccess().getConditionConditionParserRuleCall_3_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LiveToAliveRule returns LiveToAliveRule
	 *
	 * Constraint:
	 *     condition=Condition
	 * </pre>
	 */
	protected void sequence_LiveToAliveRule(ISerializationContext context, LiveToAliveRule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LIVE_TO_ALIVE_RULE__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LIVE_TO_ALIVE_RULE__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiveToAliveRuleAccess().getConditionConditionParserRuleCall_3_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LiveToDeadRule returns LiveToDeadRule
	 *
	 * Constraint:
	 *     condition=Condition
	 * </pre>
	 */
	protected void sequence_LiveToDeadRule(ISerializationContext context, LiveToDeadRule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LIVE_TO_DEAD_RULE__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LIVE_TO_DEAD_RULE__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiveToDeadRuleAccess().getConditionConditionParserRuleCall_3_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (grid=gridDefinition rules=rulesDefinition steps=stepsDefinition)
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MODEL__GRID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MODEL__GRID));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MODEL__RULES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MODEL__RULES));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MODEL__STEPS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MODEL__STEPS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAccess().getGridGridDefinitionParserRuleCall_0_0(), semanticObject.getGrid());
		feeder.accept(grammarAccess.getModelAccess().getRulesRulesDefinitionParserRuleCall_1_0(), semanticObject.getRules());
		feeder.accept(grammarAccess.getModelAccess().getStepsStepsDefinitionParserRuleCall_2_0(), semanticObject.getSteps());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NeighborCheck returns NeighborCheck
	 *
	 * Constraint:
	 *     neighborList+=Neighbor*
	 * </pre>
	 */
	protected void sequence_NeighborCheck(ISerializationContext context, NeighborCheck semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Neighbor returns Neighbor
	 *
	 * Constraint:
	 *     (dx=INT dy=INT)
	 * </pre>
	 */
	protected void sequence_Neighbor(ISerializationContext context, Neighbor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NEIGHBOR__DX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NEIGHBOR__DX));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NEIGHBOR__DY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NEIGHBOR__DY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNeighborAccess().getDxINTTerminalRuleCall_1_0(), semanticObject.getDx());
		feeder.accept(grammarAccess.getNeighborAccess().getDyINTTerminalRuleCall_3_0(), semanticObject.getDy());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     gridDefinition returns gridDefinition
	 *
	 * Constraint:
	 *     (width=INT height=INT (aliveCells+=CellCoord aliveCells+=CellCoord*)?)
	 * </pre>
	 */
	protected void sequence_gridDefinition(ISerializationContext context, gridDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     rulesDefinition returns rulesDefinition
	 *
	 * Constraint:
	 *     (
	 *         (liveToDead+=LiveToDeadRule* liveToAlive+=LiveToAliveRule+ deadToAlive+=DeadToAliveRule+) | 
	 *         (liveToDead+=LiveToDeadRule* deadToAlive+=DeadToAliveRule+) | 
	 *         deadToAlive+=DeadToAliveRule+
	 *     )?
	 * </pre>
	 */
	protected void sequence_rulesDefinition(ISerializationContext context, rulesDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     stepsDefinition returns stepsDefinition
	 *
	 * Constraint:
	 *     count=INT
	 * </pre>
	 */
	protected void sequence_stepsDefinition(ISerializationContext context, stepsDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.STEPS_DEFINITION__COUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.STEPS_DEFINITION__COUNT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStepsDefinitionAccess().getCountINTTerminalRuleCall_1_0(), semanticObject.getCount());
		feeder.finish();
	}
	
	
}
